// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // isAIx is kind of global var that tells if the ix is A or not
    Not(in = instruction[15], out = isAIx);

    // A reg is loaded if either ix is A, or is dest of C ix is A
    // This mux distinguishes between these two conditions
    Mux16(a = aluOut, b = instruction, sel = isAIx, out = muxOut);

    // Whether or not to actually load the value from previous mux
    // in A reg.
    Mux(a = instruction[5], b = true, sel = isAIx, out = ALoadBit);
    ARegister(in = muxOut, load = ALoadBit, out = AOut, out[0..14] = addressM);

    // Pretty simple. Bit 12 in C ix tells whether one of the ALU
    // inputs will be A reg or M reg
    Mux16(a = AOut, b = inM, sel = instruction[12], out = AMMuxOut);

    // Bit 4 of of C ix tells us if we should load D reg or not. We
    // definitely don't want to load it in case of A ix
    Mux(a = instruction[4], b = false, sel = isAIx, out = DLoadBit);
    DRegister(in = aluOut, load = DLoadBit, out = DOut);

    // Let the computations begin!
    ALU(x = DOut, y = AMMuxOut, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = aluOut, zr = aluZr, ng = aluNg);

    // Bit 3 of of C ix tells us if we should load M reg or not. We
    // definitely don't want to load it in case of A ix
    Mux(a = instruction[3], b = false, sel = isAIx, out = writeM);

    // The next block of chips calculate whether or not to set the
    // load bit of the PC. The ROM ix to jump to would already have
    // been loaded in A reg by a previous ix.
    Or(a = aluNg, b = aluZr, out = aluPsTmp);
    Not(in = aluPsTmp, out = aluPs);
    And(a = aluNg, b = instruction[2], out = pcLoad2);
    And(a = aluZr, b = instruction[1], out = pcLoad1);
    And(a = aluPs, b = instruction[0], out = pcLoad0);
    Or(a = pcLoad0, b = pcLoad1, out = pcLoad0Or1);
    Or(a = pcLoad0Or1, b = pcLoad2, out = pcLoad0Or1Or2);
    Mux(a = pcLoad0Or1Or2, b = false, sel = isAIx, out = pcLoad);

    // Compute the next ROM ix
    PC(in = AOut, load = pcLoad, inc = true, reset = reset, out[0..14] = pc, out[15] = true);
}